<div class="container mt-5">
    <!-- Header Section -->
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h2 class="theme-gradient">Space Details</h2>

        <div class="btn-section">
            <a class="btn-default bg-solid-primary">
                <span class="icon"><i class="feather-file"></i></span>
                <span>Download Resume</span>
            </a>
        </div>
    </div>

    <h3 class="section-title ">Company Name : <strong class="">ABC </strong></h3>
    <h3 class="section-title">Position : <strong class="">Backend Developer</strong> </h3>

    <!-- Job Description and Resume Summary -->
    <div class="mb-4">
        <div class="row">

            <div class="rainbow-accordion-style  accordion">
                <div class="accordion" id="accordionExamplea">
                    <div class="accordion-item card bg-flashlight" style="--x: 761px; --y: 102px;">
                        <h2 class="accordion-header card-header" id="headingOne">
                            <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse"
                                data-bs-target="#collapseOne" aria-expanded="false" aria-controls="collapseOne">
                                Job Description
                            </button>
                        </h2>
                        <div id="collapseOne" class="accordion-collapse collapse" aria-labelledby="headingOne"
                            data-bs-parent="#accordionExamplea" >
                            <div class="accordion-body card-body">
                                ChatenAI is an AI-powered messaging platform that understands and
                                responds to your natural language queries. Ask anything you'd typically
                                ask a human assistantâ€”get weather updates, news, restaurant
                                recommendations, and more!
                            </div>
                        </div>
                    </div>

                    <div class="accordion-item card bg-flashlight" style="--x: 765px; --y: 14px;">
                        <h2 class="accordion-header card-header" id="headingTwo">
                            <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse"
                                data-bs-target="#collapseTwo" aria-expanded="false" aria-controls="collapseTwo">
                                Summary of Resume
                            </button>
                        </h2>
                        <div id="collapseTwo" class="accordion-collapse collapse" aria-labelledby="headingTwo"
                            data-bs-parent="#accordionExamplea">
                            <div class="accordion-body card-body">
                                ChatenAI, an AI-driven messaging platform, adeptly communicates with
                                users using natural language understanding. It delivers helpful
                                responses to your inquiries and requests.
                            </div>
                        </div>
                    </div>



                </div>
            </div>

        </div>
    </div>
    <hr>
    <hr>
    <h3 class="title">Interview Rounds</h3>

    <div class="row row--15 service-wrapper">


        <div class="col-lg-3 col-md-4 col-sm-6 col-6 sal-animate" data-sal="slide-up" data-sal-duration="700"
            data-sal-delay="0">
            <div class="service service__style--1 bg-color-blackest radius mt--25 text-center rbt-border-none variation-4 bg-flashlight"
                style="--x: 218px; --y: 5px;">

                <!-- Content Section -->
                <div class="content">
                    <!-- Job Position -->
                    <h4 class="title ">
                        Technical
                    </h4>


                    <div class="header-btn d-none d-md-block">
                        <a class="btn-default btn-small round">
                            Start Interview<i class="feather-start"></i></a>
                    </div>
                    <!-- Resume Summary (Optional) -->

                </div>
            </div>
        </div>

        <div class="col-lg-3 col-md-4 col-sm-6 col-6 sal-animate" data-sal="slide-up" data-sal-duration="700"
        data-sal-delay="0">
        <div class="service service__style--1 bg-color-blackest radius mt--25 text-center rbt-border-none variation-4 bg-flashlight"
            style="--x: 218px; --y: 5px;">

            <!-- Content Section -->
            <div class="content">
                <!-- Job Position -->
                <h4 class="title ">
                   HR
                </h4>


                <div class="header-btn d-none d-md-block">
                    <a class="btn-default btn-small round" data-bs-toggle="modal" data-bs-target="#likeModal" >
                           View Summary <i class="feather-start"></i></a>
                </div>
                <!-- Resume Summary (Optional) -->

            </div>
        </div>
    </div>

    </div>

</div>

<div id="likeModal" class="modal rbt-modal-box like-modal fade" tabindex="-1" style="display: none;" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content wrapper top-flashlight leftside light-xl">
            <h5 class="title">Interview Summary</h5>
<div>
    hello this is sample text
</div>
            <button class="close-button" data-bs-dismiss="modal">
                <i class="feather-x"></i>
            </button>
        </div>
    </div>
</div>





<!--  -->



<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Interactive Interview</title>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/css/bootstrap.min.css">
  <style>
    #loading-bar {
      width: 100%;
      height: 5px;
      background-color: #ccc;
      position: relative;
    }

    #loading-progress {
      height: 100%;
      width: 0;
      background-color: #007bff;
      transition: width 0.3s ease;
    }

    #mic-button:disabled, #stop-question-button:disabled {
      background-color: #ccc;
      cursor: not-allowed;
    }

    #camera-container {
      margin-top: 20px;
      text-align: center;
    }

    #video {
      width: 100%;
      max-width: 500px;
      border: 1px solid #ccc;
    }

    .button-group {
      display: flex;
      justify-content: center;
      gap: 10px;
      margin-top: 15px;
    }
  </style>
</head>
<body>
<div class="container mt-5">
  <div id="loading-container" class="text-center">
    <div id="loading-bar">
      <div id="loading-progress"></div>
    </div>
    <p id="loading-message">Starting your interview...</p>
  </div>

  <div id="interview-container" class="d-none">
    <h2 id="question-container" class="text-center">Loading question...</h2>

    <div class="mt-4 text-center">
      <textarea id="answer" class="form-control" rows="3" placeholder="Your answer will appear here..." disabled></textarea>
    </div>

    <div class="button-group">
      <button id="stop-question-button" class="btn btn-warning" disabled>Stop Question</button>
      <button id="replay-question-button" class="btn btn-info">Replay Question</button>
      <button id="mic-button" class="btn btn-primary" disabled>Start Speaking</button>
      <button id="stop-speaking-button" class="btn btn-danger" disabled>Stop Speaking</button>
      <button id="next-button" class="btn btn-success" disabled>Next Question</button>
      <button id="edit-button" class="btn btn-warning" style="display: none;">Edit Answer</button>
    </div>

    <div id="camera-container">
      <video id="video" autoplay></video>
    </div>
  </div>
</div>

<script>
  // Initialize variables
  const spaceId = '<%= spaceId %>'; // Passed from server
  const roundName = '<%= roundName %>'; // Passed from server
  let currentQuestionIndex = 0;
  let questions = [];
  let answers = {}; // Temporary storage for answers
  let recognition;
  let isRecording = false;
  let currentAnswer = ''; // Store current answer while speaking
  let currentUtterance = null; // Track current speech synthesis

  // Show loading bar and fetch questions
  async function initializeInterview() {
    const loadingBar = document.getElementById('loading-progress');
    let progress = 0;

    const interval = setInterval(() => {
      if (progress >= 100) clearInterval(interval);
      progress += 10;
      loadingBar.style.width = `${progress}%`;
    }, 300);

    try {
      // Fetch questions via API call
      const response = await fetch(`/generate-questions/${spaceId}/${roundName}`);
      const data = await response.json();
      questions = data.questions;

      // Once questions are loaded, hide loading and show interview UI
      document.getElementById('loading-container').classList.add('d-none');
      document.getElementById('interview-container').classList.remove('d-none');
      showQuestion(currentQuestionIndex);
    } catch (err) {
      document.getElementById('loading-message').innerText = 'Error loading questions. Please try again.';
      console.error('Error initializing interview:', err);
    }
  }

  // Display the current question and speak it aloud
  function showQuestion(index) {
    const questionContainer = document.getElementById('question-container');
    const micButton = document.getElementById('mic-button');
    const stopQuestionButton = document.getElementById('stop-question-button');
    questionContainer.textContent = questions[index];

    // Stop any previous speech
    speechSynthesis.cancel();

    // Use Text-to-Speech to read the question aloud
    currentUtterance = new SpeechSynthesisUtterance(questions[index]);

    // Set the rate and pitch for more natural sound
    currentUtterance.rate = 1; // Default rate
    currentUtterance.pitch = 1; // Normal pitch

    // Optional: Set a more natural voice (adjust as per browser)
    const voices = speechSynthesis.getVoices();
    currentUtterance.voice = voices.find(voice => voice.name === "Google UK English Male") || voices[0];

    // Disable buttons while speaking
    micButton.disabled = true;
    stopQuestionButton.disabled = false;

    // When speech synthesis ends, enable the mic button and allow recording
    currentUtterance.onend = () => {
      micButton.disabled = false; // Enable mic button after speaking
      stopQuestionButton.disabled = true;
    };

    speechSynthesis.speak(currentUtterance); // Speak the question
  }

  // Stop the question from being spoken
  function stopQuestionSpeaking() {
    const micButton = document.getElementById('mic-button');
    const stopQuestionButton = document.getElementById('stop-question-button');

    // Stop speech synthesis
    speechSynthesis.cancel();

    // Enable mic button and disable stop question button
    micButton.disabled = false;
    stopQuestionButton.disabled = true;
  }

  function checkSpeechRecognitionSupport() {
    // Check for support in the current browser
    if (!('webkitSpeechRecognition' in window)) {
      // Speech recognition is not supported
      alert('Your browser does not support speech recognition. You can answer manually.');
      document.getElementById('mic-button').disabled = true;  // Disable mic button
    } else {
      recognition = new webkitSpeechRecognition();
      recognition.lang = 'en-US';
      recognition.continuous = true;  // Enable continuous mode
      recognition.interimResults = true;  // Enable interim results

      recognition.onstart = () => {
        currentAnswer = document.getElementById('answer').value || ''; // Preserve existing text
        document.getElementById('mic-button').disabled = true;
        document.getElementById('stop-speaking-button').disabled = false;
      };

      recognition.onresult = (event) => {
        let finalTranscript = currentAnswer; // Start with existing text
        let interimTranscript = '';

        for (let i = event.resultIndex; i < event.results.length; i++) {
          const result = event.results[i];
          const transcript = result[0].transcript;

          // If it's a final result, append it
          if (result.isFinal) {
            finalTranscript += ' ' + transcript.trim();
          } else {
            // Interim results are shown separately
            interimTranscript += transcript;
          }
        }

        // Update the answer with final and interim results
        document.getElementById('answer').value = finalTranscript + 
          (interimTranscript ? ` (${interimTranscript})` : '');
        
        // Update the current answer for continuity
        currentAnswer = finalTranscript;
      };

      recognition.onerror = (event) => {
        console.error('Speech recognition error:', event);
        document.getElementById('mic-button').disabled = false;
        document.getElementById('stop-speaking-button').disabled = true;
      };

      recognition.onend = () => {
        document.getElementById('mic-button').disabled = false;
        document.getElementById('stop-speaking-button').disabled = true;
      };
    }
  }

  function replayQuestion() {
    showQuestion(currentQuestionIndex);
  }

  function toggleSpeechRecognition() {
    const micButton = document.getElementById('mic-button');
    const stopSpeakingButton = document.getElementById('stop-speaking-button');
    const nextButton = document.getElementById('next-button');
    
    // Start recording
    currentAnswer = document.getElementById('answer').value || ''; // Preserve existing text
    recognition.start();
    
    micButton.disabled = true;
    stopSpeakingButton.disabled = false;
    micButton.textContent = 'Listening...';
    document.getElementById('edit-button').style.display = 'none';
    nextButton.disabled = true;
  }

  function stopSpeaking() {
    const micButton = document.getElementById('mic-button');
    const stopSpeakingButton = document.getElementById('stop-speaking-button');
    const nextButton = document.getElementById('next-button');

    if (recognition) {
      recognition.stop(); // Stop recording
    }

    micButton.textContent = 'Start Speaking';
    micButton.disabled = false;
    stopSpeakingButton.disabled = true;
    document.getElementById('answer').disabled = false;
    document.getElementById('edit-button').style.display = 'inline-block';
    nextButton.disabled = false;
  }

  // Save the current answer locally and move to the next question
  function saveAnswerAndNext() {
    const question = questions[currentQuestionIndex];
    const answer = document.getElementById('answer').value;
    const nextButton = document.getElementById('next-button');

    // Save the answer locally in the answers object
    answers[question] = answer;

    // Proceed to the next question
    currentQuestionIndex++;
    if (currentQuestionIndex < questions.length) {
      document.getElementById('answer').value = '';
      nextButton.disabled = true;
      showQuestion(currentQuestionIndex);
    } else {
      finishInterview(); // Call finishInterview once all questions are answered
    }
  }

  // Enable editing mode for the answer
  function enableEditing() {
    const editButton = document.getElementById('edit-button');
    const answerTextarea = document.getElementById('answer');
    answerTextarea.disabled = false;
    editButton.style.display = 'none';
    document.getElementById('next-button').disabled = false; // Allow to move to next question
  }

  // Save all answers to the server and finalize the interview
  async function finishInterview() {
    try {
      const response = await fetch(`/finish-round/${spaceId}/${roundName}`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ answers }),
      });

      if (response.ok) {
        alert('Interview completed successfully!');
        window.location.href = '/dashboard'; // Redirect to the dashboard
      } else {
        alert('Error finishing interview. Please try again.');
      }
    } catch (err) {
      console.error('Error finishing interview:', err);
    }
  }

  // Initialize camera stream
  async function initializeCamera() {
    try {
      const stream = await navigator.mediaDevices.getUserMedia({ video: true });
      const video = document.getElementById('video');
      video.srcObject = stream;
    } catch (err) {
      console.error('Error accessing camera:', err);
      alert('Your browser does not support webcam access. Please use a supported browser.');
    }
  }

  // Event listeners
  document.addEventListener('DOMContentLoaded', () => {
    checkSpeechRecognitionSupport();
    initializeInterview();
    initializeCamera();
    
    // New event listeners
    document.getElementById('stop-question-button').addEventListener('click', stopQuestionSpeaking);
    document.getElementById('replay-question-button').addEventListener('click', replayQuestion);
    document.getElementById('mic-button').addEventListener('click', toggleSpeechRecognition);
    document.getElementById('stop-speaking-button').addEventListener('click', stopSpeaking);
    document.getElementById('next-button').addEventListener('click', saveAnswerAndNext);
    document.getElementById('edit-button').addEventListener('click', enableEditing);
  });
</script>
</body>
</html>